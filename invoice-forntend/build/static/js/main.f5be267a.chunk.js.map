{"version":3,"sources":["Pages/invoice/Invoice.js","Pages/Prescription/Prescription.js","App.js","reportWebVitals.js","index.js"],"names":["window","env","REACT_APP_SERVER_URL","TRN","CLINIC_ADDRESS","CLINIC_NAME","CLINIC_EMAIL","CURRENCY","CR","Component","Prescription","POWERED_BY","props","isValidId","id","isNaN","alert","onInputchange","event","setState","target","name","parseInt","value","onPrescriptionInputchange","changePatient","patient","patientId","patientcode","showPatientList","e","preventDefault","showInvoiceList","showPrescriptionTemplate","a","state","Object","keys","doctor","length","fullname","res","axios","get","data","patientDetails","drugs","routes","frequencies","drugDetails","assign","drugDetailsTemplate","drugRows","validateDrugDetails","drugId","drug","frequencyId","frequency","routeId","route","dosage","duration","addDrugDetails","push","showPrintButton","setField","keyName","className","selectedOptions","text","validatePrescription","patientname","prescription","patientName","drCode","usercode","drugDetail","diagnosis","patientInstruction","post","headers","then","console","log","now","Date","document","title","JSON","parse","config","getUTCFullYear","toString","getUTCMonth","getUTCDate","print","catch","err","getAge","dateString","birthday","setDoctor","doctors","doctorList","filter","dr","instructions","dated","toLocaleString","patients","patientList","error","this","drugList","map","drg","key","formula","drugName","routeList","rt","code","frequencyList","fr","doctorListHtml","drugRowsHtml","pat","onClick","gender","dob","src","class","placeholder","type","onChange","disabled","selected","getInvoiceListByPatient","toLocaleDateString","email","mobileno","Math","round","step","licence","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f5be267a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from 'axios';\n\nconst {REACT_APP_SERVER_URL, TRN, CLINIC_ADDRESS, CLINIC_NAME, CLINIC_EMAIL, CURRENCY, CR} = window.env;\nclass Invoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dated: new Date().toLocaleString(),\n      patientId: undefined,\n      showPatientList: true\n    };\n  }\n  getInvoices=(e)=> {\n    e.preventDefault();\n    let id = this.state.patientId;\n    if(!this.isValidId(id)) return;\n    axios.get(REACT_APP_SERVER_URL + 'getInvoice?patientId=' + id)\n      .then(res => {\n        console.log('response : ', res);\n        if(res.data) {\n          if(res.data.services.length < 1 ) {\n            alert('No service provided to this patient today');\n            return;\n          }\n          this.setState({\n            'patientDetail' : res.data.patientDetails,\n            'services' : res.data.services,\n            'paymentDetails' : res.data.paymentDetails,\n            'discounts' : res.data.discountsDetails,\n            'showPatientList' : false,\n            'showInvoiceList' : false\n          });\n        } else {\n          alert(\"Backend Service failed to respond\");\n        }\n      }, (error)=> {\n        alert(\"Backend Service failed to respond\");\n        console.log('error : ', error);\n      }\n    )\n  }\n\n  isValidId = (id) => {\n    if(!id) {\n      alert('Please enter Patient Id first');\n      return false;\n    }\n    if(isNaN(id)) {\n      alert('Please enter a valid Patient Id');\n      return false;\n    }\n    return true;\n  }\n\n  getInvoiceListByPatient= (e)=> {\n    e.preventDefault();\n    let id = this.state.patientId;\n    if(!this.isValidId(id)) return;\n    axios.get(REACT_APP_SERVER_URL + 'getInvoiceList?invoicesPerPage=100&patientId=' + id)\n      .then(res => {\n        console.log('response : ', res);\n        if(res.data) {\n          this.setState({\n            'invoiceList' : res.data.invoices,\n            'showPatientList' : false,\n            'showInvoiceList' : true,\n            'patientIdForOldInvoice' : id\n          });\n        } else {\n          alert(\"Backend Service failed to respond\");\n        }\n      }, (error)=> {\n        alert(\"Backend Service failed to respond\");\n        console.log('error : ', error);\n      }\n    )\n  }\n\n  cancelInvoice = (e) => {\n    this.setState({\n      'patientDetail' : null,\n      'services' : null,\n      'paymentDetails' : null,\n      'discounts' : null,\n      'showPatientList' : true\n    });\n  }\n\n  onInputchange=(event)=> {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  regenerateInvoice = (invoiceNo) => {\n    let id = this.state.patientId;\n    if(!this.isValidId(id)) return;\n    // axios.get('http://192.168.1.109:8085/getInvoice?patientId=' + this.state.patientId)\n    axios.get(REACT_APP_SERVER_URL + 'getOldInvoice?invoiceNo=' + invoiceNo + '&patientId=' + this.state.patientIdForOldInvoice)\n      .then(res => {\n        if(res.data) {\n          this.setState({\n            'patientDetail' : res.data.patientDetails,\n            'services' : res.data.services,\n            'paymentDetails' : res.data.paymentDetails,\n            'discounts' : res.data.discountsDetails,\n            'showPatientList' : false,\n            'showInvoiceList' : false\n          });\n        } else {\n          alert(\"Backend Service failed to respond\");\n        }\n      }, (error)=> {\n        alert(\"Backend Service failed to respond\");\n        console.log('error : ', error);\n      }\n    )\n  }\n\n  componentDidMount() {\n    axios.get(REACT_APP_SERVER_URL + 'getPatients')\n      .then(res => {\n        if(res.data) {\n          if(res.data.patients && res.data.patients.length > 0) {\n            this.setState({patientList : res.data.patients});\n          } else {\n            alert('No Patient found.');\n          }\n        } else {\n          alert(\"Backend Service failed to respond\");\n        }\n      }, (error)=> {\n        alert(\"Backend Service failed to respond\");\n        console.log('error : ', error);\n      }\n    );\n  }\n\n  changePatientId = (patientId)=> {\n    this.setState({patientId : patientId});\n  }\n\n  showPatientList = (e) => {\n    e.preventDefault();\n    this.setState({\n      showPatientList : true,\n      showInvoiceList: false\n    });\n  }\n\n  render() {\n    const patientDetail = this.state.patientDetail;\n    const services = this.state.services;\n    const paymentDetails = this.state.paymentDetails;\n    const discounts = this.state.discounts;\n    const dated = this.state.dated;\n    const patientList = this.state.patientList;\n    const showPatientList = this.state.showPatientList;\n    const invoiceList = this.state.invoiceList;\n    const showInvoiceList = this.state.showInvoiceList;\n\n    let cost = {\n      totalCost : 0,\n      totalVat : 0,\n      totalPayment : 0,\n      discount: 0\n    };\n\n    if(discounts && discounts.length > 0) {\n      discounts.forEach(discount => {\n        cost.discount += (discount.amount * (-1));\n      });\n    };\n    let invoices = invoiceList ? invoiceList.map((inv, key) =>{\n      return(\n        <tr key={key}>\n          <td onClick={()=> this.regenerateInvoice(inv.invoicenumber)} className=\"link\">{inv.invoicenumber}</td>\n          <td>{inv.patientcode}</td>\n          <td>{inv.invoicedate}</td>\n        </tr>\n      )\n    }) : null;\n    let patients = patientList ? patientList.map((pat, key) =>{\n      return(\n        <tr key={key}>\n          <td onClick={()=> this.changePatientId(pat.patientcode)} className=\"link\">{pat.patientcode}</td>\n          <td>{pat.patientname}</td>\n          <td>{pat.gender === 'M' ? 'Male' : 'Female'}</td>\n          <td>{pat.dob}</td>\n        </tr>\n      )\n    }) : null;\n    let serviceTable = services && services.length > 0 ? services.map((res) => {\n      cost.totalCost += res.patientcost;\n      cost.totalVat += res.vatamount;\n      return (\n        <tr>\n          <td>{res.username}</td>\n          <td>{res.description}</td>\n          <td style={{textAlign: \"center\"}}>{res.codeid}</td>\n          <td style={{textAlign: \"center\"}}>{res.Tooth}</td>\n          <td style={{textAlign: \"center\"}}>{res.Surface}</td>\n          <td style={{textAlign: \"right\"}}>{res.patientcost.toFixed(2) }</td>\n          <td style={{textAlign: \"center\"}}>{res.vatpercent}</td>\n          <td style={{textAlign: \"right\"}}>{res.vatamount.toFixed(2)}</td>\n          <td style={{textAlign: \"right\"}}>{res.amountwithvat.toFixed(2)}</td>\n        </tr>\n      );\n    }) : null;\n\n    let paymentsSection = paymentDetails && paymentDetails.length > 0 ?\n      paymentDetails.map(payment=> {\n        cost.totalPayment += payment.amount;\n        const amount = payment.amount < 0 ? (payment.amount * (-1)) : payment.amount;\n        const amountDisplay = payment.paymenttypedesc === 'Refund Cash' ?\n          '(' + amount.toFixed(2) + ')' : amount.toFixed(2);\n        return (\n          <div className=\"row\">\n            <p className=\"col-sm-6 col-md-6\">{(payment.paymenttypedesc && payment.paymenttypedesc.length > 0) ? payment.paymenttypedesc : payment.description}</p>\n            <p className=\"col-sm-6 col-md-6\" style={{textAlign: \"right\"}}>{amountDisplay}</p>\n          </div>\n        )\n      })\n      : null;\n    \n    const totalPayment = (cost.totalPayment < 0) ? cost.totalPayment*(-1) : cost.totalPayment;\n    cost.netAmount = cost.totalCost - cost.discount;\n    cost.grandTotal = cost.totalCost - cost.discount + cost.totalVat;\n    return (\n      <div className=\"receipt_box\">\n        <header>\n          <div className=\"logo\">\n            <img src={process.env.PUBLIC_URL + \"/logo.png\"} />\n          </div>\n        </header>\n        <hr/>\n        <div className=\"invoice-tab\">\n          {\n            !patientDetail ? (\n            <section className=\"form_section\">\n              <form>\n                <input name=\"patientId\" type=\"text\" placeholder=\"Enter Patient Code\" value={this.state.patientId} onChange={this.onInputchange}/>\n                <button className=\"btn btn-primary\" onClick={(e)=>this.getInvoices(e)}>Generate Invoice</button>\n                { showPatientList ?\n                  <button className=\"btn btn-primary ml-10\" onClick={(e)=>this.getInvoiceListByPatient(e)}>Get Invoices</button>\n                  : \n                  <button className=\"btn btn-primary ml-10\" onClick={(e)=>this.showPatientList(e)}>Show Patient List</button>\n                }\n              </form>\n            </section>\n            ) : null\n          }\n          {invoices && showInvoiceList ? \n            (\n              <section className=\"invoice-list\">\n                <table className=\"table table-bordered\">\n                  <thead>\n                    <tr>\n                      <th>Invoice Number</th>\n                      <th>Patient Code</th>\n                      <th>Invoice Date</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {invoices}\n                  </tbody>\n                </table>\n              </section>\n            ) : ''\n          }\n          {patients && showPatientList ? \n            (\n              <section className=\"patient-list\">\n                <table className=\"table table-bordered\">\n                  <thead>\n                    <tr>\n                      <th>Patient Id</th>\n                      <th>Patient Name</th>\n                      <th>Gender</th>\n                      <th>DOB</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {patients}\n                  </tbody>\n                </table>\n              </section>\n            ) : ''\n          }\n\n          {\n            patientDetail ? (\n              <section className=\"patient_detail\">\n                <h2 className=\"text-center\">Tax Invoice</h2>\n                <p className=\"text-center mb-0\">TRN : {TRN}</p>\n                <p className=\"text-center mb-5\">{CR}</p>\n                <div className=\"row\">\n                  <div className=\"col-sm-5 col-md-5\">\n                    <div className=\"row\">\n                      <p className=\"col-sm-4 col-md-4\">Patient:</p>\n                      <span className=\"col-sm-4 col-md-4\">{patientDetail.patientname}</span>\n                    </div>\n                    <div className=\"row\">\n                      <p className=\"col-sm-4 col-md-4\">Invoice No:</p>\n                      <span className=\"col-sm-4 col-md-4\">{patientDetail.invoicenumber}</span>\n                    </div>\n                    <div className=\"row\">\n                      <p className=\"col-sm-4 col-md-4\">Date:</p>\n                      {/* <span className=\"col-sm-4 col-md-4\">{new Date(services[0].invoicedate).toLocaleDateString(\"en-UK\")}</span> */}\n                      <span className=\"col-sm-4 col-md-4\">{new Date(services[0].dateofservice).toLocaleDateString(\"en-UK\")}</span>\n                    </div>\n                  </div>\n                  <div className=\"col-sm-4 col-md-4\">\n                    <div className=\"row\">\n                      <p className=\"col-sm-4 col-md-4\">Patient Code:</p>\n                      <span className=\"col-sm-4 col-md-4\">{patientDetail.patientcode}</span>\n                    </div>\n                    <div className=\"row\">\n                      <p className=\"col-sm-4 col-md-4\">Gender:</p>\n                      <span className=\"col-sm-4 col-md-4\">{patientDetail.gender === 'M' ? 'Male' : patientDetail.gender === 'F' ? 'Female' : 'Unknown'}</span>\n                    </div>\n                    <div className=\"row\">\n                      <p className=\"col-sm-4 col-md-4\">DOB:</p>\n                      <span className=\"col-sm-4 col-md-4\">{new Date(patientDetail.dob).toLocaleDateString(\"en-UK\")}</span>\n                    </div>\n                  </div>\n                </div>\n              </section> ): null\n          }\n          {\n            serviceTable ? (\n              <section className=\"provider_detail\">\n                <table className=\"table table-bordered\">\n                  <thead>\n                    <tr>\n                      <th>Provider</th>\n                      <th>Service</th>\n                      <th>Code</th>\n                      <th>Tooth</th>\n                      <th>Surface</th>\n                      <th>Amount</th>\n                      <th>VAT%</th>\n                      <th>VAT</th>\n                      <th>Amount With VAT</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {serviceTable}\n                  </tbody>\n                </table>\n              </section>\n            ) : null\n          }\n          {\n            serviceTable ? (\n              <section className=\"payment_detail\">\n                <div className=\"row\">\n                  <div className=\"col-sm-4 col-md-4\">\n                    <p>Payment Mode</p>\n                    {paymentsSection}\n                    <div className=\"row\">\n                      <p className=\"col-sm-6 col-md-6\">Total Payment:</p>\n                      <p className=\"col-sm-6 col-md-6\" style={{textAlign: \"right\"}}>{totalPayment.toFixed(2)}</p>\n                    </div>\n                  </div>\n                  <div className=\"col-sm-2 col-md-2\"></div>\n                  <div className=\"col-sm-4 col-md-4\">\n                    <div className=\"row\">\n                      <p className=\"col-sm-6 col-md-6\">Total:</p>\n                      <p className=\"col-sm-6 col-md-6\" style={{textAlign: \"right\"}}>{cost.totalCost.toFixed(2)}</p>\n                      <p className=\"col-sm-6 col-md-6\" >Discount:</p>\n                      <p className=\"col-sm-6 col-md-6\" style={{textAlign: \"right\"}}>{cost.discount.toFixed(2)}</p>\n                      <p className=\"col-sm-6 col-md-6\">Net Amount:</p>\n                      <p className=\"col-sm-6 col-md-6\" style={{textAlign: \"right\"}}>{cost.netAmount.toFixed(2)}</p>\n                      <p className=\"col-sm-6 col-md-6\">Total VAT:</p>\n                      <p className=\"col-sm-6 col-md-6\" style={{textAlign: \"right\"}}>{cost.totalVat.toFixed(2)}</p>\n                      <p className=\"col-sm-6 col-md-6\">\n                        <b>Grand Total:</b>\n                      </p>\n                      <p className=\"col-sm-6 col-md-6\" style={{textAlign: \"right\"}}>\n                        <b>{cost.grandTotal.toFixed(2)}</b>\n                      </p>\n                      <p className=\"col-sm-6 col-md-6\">\n                        <b>Total Payment:</b>\n                      </p>\n                      <p className=\"col-sm-6 col-md-6\" style={{textAlign: \"right\"}}>\n                        <b>{totalPayment.toFixed(2)}</b>\n                      </p>\n                      <p className=\"col-sm-6 col-md-6\">\n                        <b>Invoice Balance:</b>\n                      </p>\n                      <p className=\"col-sm-6 col-md-6\" style={{textAlign: \"right\"}}>\n                        <b>{(cost.grandTotal + cost.totalPayment).toFixed(2)}</b>\n                      </p>\n                      <p className=\"col-sm-6 col-md-6\">\n                        <b></b>\n                      </p>\n                      <p className=\"col-sm-6 col-md-6\">\n                        <b></b>\n                      </p>\n                      <p className=\"col-sm-6 col-md-6\">\n                        <b>Patient Balance:</b>\n                      </p>\n                      <p className=\"col-sm-6 col-md-6\" style={{textAlign: \"right\"}}>\n                        <b>{parseInt(patientDetail.balance).toFixed(2)}</b>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </section>\n            ) : null\n          }\n          { patientDetail ? (\n            <>\n              <p><b>Note: Currency = {CURRENCY}</b></p>\n              <hr/>\n              <footer>\n                <span className=\"text-center\">\n                  {CLINIC_NAME}\n                </span>\n                <span className=\"text-center\">{CLINIC_ADDRESS}</span>\n                <span className=\"text-center\">\n                  {CLINIC_EMAIL}\n                </span>\n                <span className=\"text-end\">Powered by <b><i>DigiSol Ltd.</i></b></span>\n              </footer>\n              <div className=\"row justify-content-md-center no-print\">\n                <div className=\"col-sm-2 col-md-2\">\n                  <button type=\"button\" className=\"btn btn-primary\" onClick={(e)=>window.print()}>Print</button>\n                  <button type=\"button\" className=\"btn btn-btn-light\" onClick={(e)=>this.cancelInvoice(e)}>Cancel</button>\n                </div>\n              </div>\n            </>\n            ) : null\n          }\n        </div>\n      </div>\n    );\n  }\n}\nexport default Invoice;","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from 'axios';\n\nconst {REACT_APP_SERVER_URL, TRN, CLINIC_ADDRESS, CLINIC_NAME, CLINIC_EMAIL, POWERED_BY} = window.env;\nclass Prescription extends Component {\n  constructor(props) {\n    super(props);\n    this.drugDetailsTemplate = {\n      drugId: 0,\n      drug: '',\n      dosage: '',\n      frequencyId: 0,\n      frequency: '',\n      routeId: 0,\n      route: '',\n      duration: '',\n      instructions: ''\n    };\n    this.state = {\n      dated: new Date().toLocaleString(),\n\t\t\tpatient: {},\n      showPatientList: true,\n      doctor: {},\n      diagnosis: '',\n      patientInstruction: '',\n      routes: [],\n      drugs: [],\n      frequencies: [],\n      drugRows: [],\n      drugDetails: Object.assign({},this.drugDetailsTemplate),\n      showPrintButton: true\n    };\n  }\n\n  isValidId = (id) => {\n    if(!id) {\n      alert('Please enter Patient Id first');\n      return false;\n    }\n    if(isNaN(id)) {\n      alert('Please enter a valid Patient Id');\n      return false;\n    }\n    return true;\n  }\n\n  onInputchange=(event)=> {\n    this.setState({\n      [event.target.name]: parseInt(event.target.value),\n      patient: {}\n    });\n  }\n\n  onPrescriptionInputchange=(event)=> {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  componentDidMount() {\n    axios.get(REACT_APP_SERVER_URL + 'getPatientsAndDoctors')\n      .then(res => {\n        if(res.data) {\n          if(res.data.doctors && res.data.doctors.length > 0) {\n            this.setState({doctorList : res.data.doctors});\n          } else {\n            alert('No Doctor found.');\n            return;\n          }\n          if(res.data.patients && res.data.patients.length > 0) {\n            this.setState({patientList : res.data.patients});\n          } else {\n            alert('No Patient found.');\n          }\n        } else {\n          alert(\"Backend Service failed to respond\");\n        }\n      }, (error)=> {\n        alert(\"Backend Service failed to respond\");\n        console.log('error : ', error);\n      }\n    );\n  }\n\n  changePatient = (patient)=> {\n    this.setState({patientId : patient.patientcode, patient: patient});\n  }\n\n  showPatientList = (e) => {\n    e.preventDefault();\n    this.setState({\n      showPatientList : true,\n      showInvoiceList: false\n    });\n  }\n\n\tshowPrescriptionTemplate = async() => {\n\t\tconst patientId = this.state.patientId;\n    if(Object.keys(this.state.doctor).length < 1 || this.state.doctor.fullname.length < 1) {\n      alert(\"Please select doctor first.\");\n      return;\n    }\n\t\tif(this.state.patientId && typeof this.state.patientId === 'number' && this.state.patientId > 0) {\n\n      let res = null;\n      res = await\taxios.get(REACT_APP_SERVER_URL + 'getPrescriptionDetails?patientId=' + patientId);\n      if(res.data && res.data.patientDetails && res.data.patientDetails.length > 0) {\n        this.setState({\n          showPatientList : false,\n          patient: res.data.patientDetails[0],\n          drugs: res.data.drugs,\n          routes: res.data.routes,\n          frequencies: res.data.frequencies,\n          drugDetails: Object.assign({},this.drugDetailsTemplate),\n          drugRows: []\n        });\n      } else {\n        alert(\"No Patient exists against this code\");\n      } \n    } else {\n\t\t\talert(\"Patient Code must be a number\");\n\t\t}\n\t\t\n\t}\n\n  validateDrugDetails = () => {\n    let {drugDetails} = this.state;\n    if(drugDetails.drugId < 1 || drugDetails.drug.length < 1 ) {\n      alert('Drug cannot be left blank');\n      return;\n    }\n    if(drugDetails.frequencyId < 1 || drugDetails.frequency.length < 1 ) {\n      alert('Frequency cannot be left blank');\n      return;\n    }\n    if(drugDetails.routeId < 1 || drugDetails.route.length < 1 ) {\n      alert('Route cannot be left blank');\n      return;\n    }\n    if(drugDetails.dosage.length < 1 ) {\n      alert('Dosage cannot be less than 1 or left blank');\n      return;\n    }\n    if(drugDetails.duration.length < 1 ) {\n      alert('Duration cannot be less than 1 or left blank');\n      return;\n    }\n    this.addDrugDetails();\n  }\n\n  addDrugDetails = () => {\n    let drugRows = this.state.drugRows;\n    drugRows.push(Object.assign({},this.state.drugDetails));\n    this.setState({\n      drugRows: drugRows,\n      drugDetails: Object.assign({},this.drugDetailsTemplate),\n      showPrintButton:true\n    });\n  }\n\n  setField = (e, keyName) => {\n    let {drugDetails} = this.state;\n    if(e.target.className === 'form-select') {\n      drugDetails[keyName] = e.target.selectedOptions[0].text;\n      drugDetails[keyName+'Id'] = e.target.value\n    } else{\n      drugDetails[keyName] = e.target.value;\n    }\n    this.setState({ drugDetails: drugDetails });\n  };\n\n  validatePrescription = () => {\n    if(this.state.drugRows.length < 1 ) {\n      alert('Add atleast one drug to generate prescription');\n      return;\n    }\n    if(!this.state.patient || this.state.patient.patientcode < 1 || this.state.patient.patientname.length < 1) {\n      alert('Patient Name or Id cannot cannot be left blank');\n      return;\n    }\n    let axiosConfig = {\n      headers: {\n          'Content-Type': 'application/json'\n      }\n    };\n    let prescription = {\n      patientId: this.state.patient.patientcode,\n      patientName: this.state.patient.patientname,\n      doctor: this.state.doctor.fullname,\n      drCode: this.state.doctor.usercode,\n      drugDetail: this.state.drugRows,\n      diagnosis: this.state.diagnosis,\n      patientInstruction: this.state.patientInstruction\n    }\n    axios.post(REACT_APP_SERVER_URL + 'savePrescription', prescription, axiosConfig)\n    .then((res) => {\n      console.log(\"RESPONSE RECEIVED: \", res);\n      const now = new Date();\n      document.title = JSON.parse(res.config.data)['patientId'] + \"-\" + now.getUTCFullYear().toString() + \"-\" +(now.getUTCMonth() + 1).toString() +\"-\" + now.getUTCDate();\n      this.setState({showPrintButton: false});\n      window.print();\n    })\n    .catch((err) => {\n      console.log(\"AXIOS ERROR: \", err);\n    })\n  }\n\n  getAge = (dateString) => {\n    var birthday = new Date(dateString);\n    return ((Date.now() - birthday) / (31557600000));\n  }\n\n  setDoctor = (name) => {\n    let doctors = this.state.doctorList.filter(function(dr){\n      return name === dr.fullname;\n    });\n    this.setState({doctor: doctors[0]});\n  }\n\n  render() {\n    // const dated = this.state.dated;\n    const patientList = this.state.patientList;\n    // const showPatientList = this.state.showPatientList;\n\t\tconst {patientId, patient, doctor, drugs, routes, frequencies, drugRows, drugDetails, showPatientList, doctorList, showPrintButton} = this.state;\n    const drugList = drugs ? drugs.map((drg, key) => {\n      return(\n        <option key={key} value={drg.drugId} title={drg.formula}>{drg.drugName}</option>\n      )\n    }) : null;\n    const routeList = routes ? routes.map((rt, key) => {\n      return(\n        <option key={key} value={rt.routeId} title={rt.code}>{rt.route}</option>\n      )\n    }) : null;\n    const frequencyList = frequencies ? frequencies.map((fr, key) => {\n      return(\n        <option key={key} value={fr.frequencyId}>{fr.frequency}</option>\n      )\n    }) : null;\n    const doctorListHtml = doctorList ? doctorList.map((dr, key)=> {\n      return(\n        <option key={key} value={dr.fullname}>{dr.fullname}</option>\n      )\n    }) : null;\n    const drugRowsHtml = drugRows.map((drg, key)=>{\n      return(\n        <tr key={key}>\n          <td>{drg.drug}</td>\n          <td>{drg.dosage}</td>\n          <td>{drg.frequency}</td>\n          <td>{drg.route}</td>\n          <td>{drg.duration}</td>\n          <td>{drg.instructions}</td>\n        </tr>\n      )\n    })\n    let patients = patientList ? patientList.map((pat, key) =>{\n      return(\n        <tr key={key}>\n          <td onClick={()=> this.changePatient(pat)} className=\"link\">{pat.patientcode}</td>\n          <td>{pat.patientname}</td>\n          <td>{pat.gender === 'M' ? 'Male' : 'Female'}</td>\n          <td>{pat.dob}</td>\n        </tr>\n      )\n    }) : null;\n\n    return (\n      <div className=\"receipt_box\">\n        <header>\n          <div className=\"logo\">\n            <img src={process.env.PUBLIC_URL + \"/logo.png\"} />\n          </div>\n        </header>\n        <hr/>\n        <div className=\"prescription-tab\">\n          <section className=\"form_section no-print\">\n            {showPatientList ? <h2 className=\"text-center\">Prescription</h2> : null}\n            <input class=\"form-input w-auto\" placeholder=\"Enter Patient Code\" name=\"patientId\" type=\"number\" value={patientId} onChange={(e) => this.onInputchange}/>\n            <select class=\"form-select select-doctor w-auto\" value={doctor.fullname ? doctor.fullname: ''} onChange={(e) => this.setDoctor(e.target.value)}>\n              <option disabled selected value=\"\">Select Doctor</option>\n              {doctorListHtml}\n            </select>\n            <button className=\"btn btn-primary\" onClick={(e)=>this.showPrescriptionTemplate()}>Generate Prescription</button>\n            { showPatientList ?\n                <button className=\"btn btn-primary ml-10\" onClick={(e)=>this.getInvoiceListByPatient(e)}>Get Prescriptions</button>\n                : \n                <button className=\"btn btn-primary ml-10\" onClick={(e)=>this.showPatientList(e)}>Show Patient List</button>\n            }\n          </section>\n          {\n            patients && showPatientList ? \n            (\n              <section className=\"patient-list\">\n                <table className=\"table table-bordered\">\n                  <thead>\n                    <tr>\n                      <th>Patient Id</th>\n                      <th>Patient Name</th>\n                      <th>Gender</th>\n                      <th>DOB</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {patients}\n                  </tbody>\n                </table>\n              </section>\n            ) : ''\n          }\n\t\t\t\t\t{\n\t\t\t\t\t\t!showPatientList ? \n              <>\n                <section className=\"patient_detail\">\n                  <h2 className=\"text-center\">Prescription</h2>\n                  <p className=\"text-center mb-5\"></p>\n                  <div className=\"row\">\n                    <div className=\"col-sm-6 col-md-5\">\n                      <div className=\"row\">\n                        <p className=\"col-sm-4 col-md-4\">Patient:</p>\n                        <span className=\"col-sm-8 col-md-4\">{patient.patientname}</span>\n                      </div>\n                      <div className=\"row\">\n                        <p className=\"col-sm-4 col-md-4\">Doctor:</p>\n                        <span className=\"col-sm-8 col-md-4\">{doctor.fullname ? doctor.fullname : ''}</span>\n                      </div>\n                      <div className=\"row\">\n                        <p className=\"col-sm-4 col-md-4\">DOB:</p>\n                        <span className=\"col-sm-8 col-md-4\">{new Date(patient.dob).toLocaleDateString(\"en-UK\")}</span>\n                      </div>\n                      <div className=\"row\">\n                        <p className=\"col-sm-4 col-md-4\">Email:</p>\n-                       <span className=\"col-sm-8 col-md-4\">{patient.email}</span>\n                      </div>\n                      <div className=\"row\">\n                        <p className=\"col-sm-4 col-md-4\">Mobile No:</p>\n                        <span className=\"col-sm-8 col-md-4\">{patient.mobileno}</span>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-6 col-md-4\">\n                      <div className=\"row\">\n                        <p className=\"col-sm-4 col-md-4\">Patient Code:</p>\n                        <span className=\"col-sm-8 col-md-4\">{patient.patientcode}</span>\n                      </div>\n                      <div className=\"row\">\n                        <p className=\"col-sm-4 col-md-4\">Gender:</p>\n                        <span className=\"col-sm-8 col-md-4\">{patient.gender === 'M' ? 'Male' : patient.gender === 'F' ? 'Female' : 'Unknown'}</span>\n                      </div>\n                      <div className=\"row\">\n                        <p className=\"col-sm-4 col-md-4\">Date:</p>\n                        <span className=\"col-sm-8 col-md-4\">{new Date().toLocaleDateString(\"en-UK\")}</span>\n                      </div>\n                      <div className=\"row\">\n                        <p className=\"col-sm-4 col-md-4\">Age:</p>\n                        <span className=\"col-sm-8 col-md-4\">{Math.round(this.getAge(patient.dob))}</span>\n                      </div>\n                    </div>\n                  </div>\n                </section>\n                <hr/>\n                <div className=\"container no-print\">\n                  <h4 className=\"page-title\">Add Drugs</h4> \n                  <div className=\"row execute_container\">\n                    <div className=\"inputGroup col-md-6\">\n                      <label>Drug</label>                  \n                      <select class=\"form-select\" value={drugDetails.drugId > 0 ? drugDetails.drugId : 0} onChange={(e) => this.setField(e, 'drug')}>\n                        <option selected value=\"0\">Select Drug</option>\n                        {drugList}\n                      </select>\n                    </div>\n                    <div className=\"inputGroup col-md-3\">\n                      <label>Dosage</label>\n                      <input\n                        type=\"number\" step=\"any\"\n                        placeholder=\"Quantity\"\n                        value={drugDetails.dosage}\n                        onChange={(e) => this.setField(e, 'dosage')}\n                      />\n                    </div>\n                    <div className=\"inputGroup col-md-3\">\n                      <label>Frequency</label>\n                      <select class=\"form-select\" value={drugDetails.frequencyId > 0 ? drugDetails.frequencyId : 0} onChange={(e) => this.setField(e, 'frequency')}>\n                        <option selected>Select Frequency</option>\n                        {frequencyList}\n                      </select>\n                    </div>\n                    <div className=\"inputGroup col-md-3\" onChange={(e) => this.setField(e, 'route')}>\n                      <label>Route</label>\n                      <select class=\"form-select\" value={drugDetails.routeId > 0 ? drugDetails.routeId : 0} onChange={(e) => this.setField(e, 'route')}>\n                        <option selected>Select Route</option>\n                        {routeList}\n                      </select>\n                    </div>\n                    <div className=\"inputGroup col-md-3\">\n                      <label>Duration</label>\n                      <input\n                        type=\"number\" step=\"any\"\n                        value={drugDetails.duration}\n                        placeholder=\"Days\"\n                        onChange={(e) => this.setField(e, 'duration')}\n                      />\n                    </div>\n                    <div className=\"inputGroup col-md-6\">\n                      <label>Instructions</label>\n                      <textarea class=\"form-control rounded-0\" value={drugDetails.instructions} onChange={(e) => this.setField(e, 'instructions')}></textarea>\n                    </div>\n                    <div className=\"inputGroup offset-md-5 col-md-2 d-flex justify-content-center\">\n                    <button className=\"btn btn-primary ml-10\" onClick={(e)=>this.validateDrugDetails()}>Add</button>\n                    </div>\n                  </div>\n                </div>\n                <section className=\"drug_detail mb-5\">\n                  <table className=\"table table-bordered\">\n                    <thead>\n                      <tr>\n                        <th>Drug</th>\n                        <th>Dosage</th>\n                        <th>Frequency</th>\n                        <th>Route</th>\n                        <th>Duration</th>\n                        <th>Instructions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {drugRowsHtml}\n                    </tbody>\n                  </table>\n                </section>\n                <div className=\"row\">\n                  <div className=\"inputGroup col-sm-4 col-md-4\">\n                    <label>Diagnosis</label>\n                    <input\n                      type=\"text\" name=\"diagnosis\"\n                      value={this.state.diagnosis}\n                      placeholder=\"Diagnosis\"\n                      onChange={this.onPrescriptionInputchange}\n                    />\n                  </div>\n                  <div className=\"inputGroup col-sm-8 col-md-8\">\n                    <label>Patient Instructions</label>\n                    <textarea class=\"form-control rounded-0\" name=\"patientInstruction\" value={this.state.patientInstruction} onChange={this.onPrescriptionInputchange}></textarea>\n                  </div>\n                </div>\n                <hr/>\n                <section className=\"payment_detail mt-5\">\n                  <div className=\"row\">\n                    <p className=\"col-sm-2 col-md-1 text-end\">Provider:</p>\n                    <p className=\"col-sm-4 col-md-3 text-start\" >{doctor.fullname ? doctor.fullname : ''}</p>\n                    <p className=\"col-sm-2 col-md-1 text-end\">Licence No:</p>\n                    <p className=\"col-sm-4 col-md-3 text-start\" >{doctor.licence ? doctor.licence : ''}</p>\n                  </div>\n                </section>\n                <footer>\n                  <span className=\"text-center\">\n                    {CLINIC_NAME}\n                  </span>\n                  <span className=\"text-center\">{CLINIC_ADDRESS}</span>\n                  <span className=\"text-center\">\n                    {CLINIC_EMAIL}\n                  </span>\n                  <span className=\"text-end\">Powered by <b><i>DigiSol Ltd.</i></b></span>\n                </footer>\n                {\n                  showPrintButton ? \n                  <div className=\"row no-print justify-content-center\">\n                    <div className=\"col-sm-2 col-md-2 d-flex justify-content-center\">\n                      <button type=\"button\" className=\"btn btn-primary\" onClick={(e)=>this.validatePrescription()}>Save & Print</button>\n                    </div>\n                  </div> : null\n                }\n              </>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Prescription;","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Invoice from \"./Pages/invoice/Invoice\";\nimport Prescription from \"./Pages/Prescription/Prescription\";\n\nexport default class App extends Component {\n  \n  constructor(props) {\n    super(props);\n  }\n\n  render() {    \n    return (\n      // <Invoice/>\n      <Prescription/>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}